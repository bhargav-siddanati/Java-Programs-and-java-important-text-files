A very interesting pattern
class Solution {
  public static void Met(int n)
{
 StringBuilder s=new StringBuilder("");
		if(n==0)
		{
         s.append("\n0xx");
		}
		else{
       while(n>0)
       {
       	if(n%10==0)
       		s.append("\n0xx");
       	else
       s.append(divide(n%10));
       	n=n/10;
       }
       }
       System.out.print(s.reverse());
}
public static String divide(int n)
{
  int i=2,count=0,c=0;
		boolean con=true;
		while(con)
		{
			for(int j=1;j<=i;j++)
			{
                if(i%j==0)
                	count++;
			}
			
			if(count==2)
			{
              c++;
              
          }

          if(c==n)
          {
          	
          	con=false;
          	String s="\n";s+=n;
          	for(int j=1;j<=i;j++)
          	{
          		s+="x";
          	}
          	return s;
          }
          count=0;
          i++;
		}
	return "";
}
}

Beautyful garden
class Solution {
  public static void Met(int n)
	{
		String s="";String d="....";
		for(int i=1;i<=n-1;i++)
		{
			s+="#.";
			
		}
		
		try{
		StringBuilder lh=new StringBuilder(s);
		lh.append("#.");
		StringBuilder rh=new StringBuilder(s);
		StringBuilder dot=new StringBuilder("..");
	   System.out.println(s+"#.#."+s+"#");
	    for(int i=2;i<=2*n;i++)
	    {
	    	System.out.print(lh+""+dot+""+rh+""+"#");
	    	System.out.println();
	    	
	    	if(i<n+1)
	    	{
	    		lh.setLength(lh.length()-2);
	    	
	    		dot.append(d);
	    		rh.setLength(rh.length()-2);
	    	}
	    	else
	    	{
	    		lh.append("#.");
	    		dot.setLength(dot.length()-4);
	    		rh.append("#.");
	    	}
	    	

	    }
	}
	    catch(Exception e){};
	 
	   System.out.println(s+"#.#."+s+"#"); 
	   

	

	}
}

An integer triangle

class Solution 
{
    public static void Met(int N) 
    {
        int uniqueno=(int)(((N/2.0)+0.5)*N);
        int rval=0,cval=0;
        rval=uniqueno;
        for(int i=1;i<=N;i++,rval--)
        {
            cval=rval;
            if(cval>=10)
            System.out.print(cval);
            else
            System.out.print("0"+cval);
            for(int j=2;j<=i;j++)
            {
                cval=cval-(N-(j-1));
                if(cval>=10 )
                System.out.print("."+cval);
                else
                System.out.print(".0"+cval); 
            }
            System.out.println();
        }
    }
}

reflected dr coocooos

class Solution 
{
    public static void Met(int[] arr)
    {
        int max=0,count=0,m,n;
        for(int i=0;i<arr.length;i++) 
        {
            for(int j=arr.length-1;j>=0;j--) 
            { 
                m=i;n=j;count=0;
                while((m<=(arr.length-1)&&n>=0)&&(arr[m]==arr[n])) 
                {
                    count++;
                    m++;
                    n--;
                }
                if(count>=max)
                max=count;
            }
        }
        System.out.println(max);
    }
}

Mr jacks consecutive v
public static void Met(char[][] arr)
{
    int row=arr.length,cols=arr[0].length,a1,a2,i,j,countr=0,countc=0,countdr=0,countdl=0,max=0,count=0;
    for(i=0;i<row;i++)
    {
        for(j=0;j<cols;j++)
        {
            if(arr[i][j]=='V')
            {
                for(int k=j;k<cols &&arr[i][k]=='V';k++)
                {
                    count++;
                }
            } 
            if(countr<count)
            countr=count;
            count=0;
        }
    }
    count=0;
    for(i=0;i<cols ;i++)
    {
        for(j=0;j<row;j++)
        {
            if(arr[j][i]=='V')
            {
				for(int k=j;k<row &&arr[k][i]=='V';k++)
                {
					count++;
				}
            } 
            if(countc<count)
            countc=count;
			count=0;
		}
	}
	count=0;
	for(i=0;i<row;i++)
    {
        for(j=0;j<cols;j++)
        {
            if(arr[i][j]=='V')
            {
                count++;
                for(int k=i,l=j;(k+1)<row && (l-1)>=0;k++,l--)
                {
                    if(arr[k+1][l-1]!='V')
               	    break;
               	    else
               		count++;
				}
            }
            if(countdr<count)
       	    countdr=count;
            count=0;
        }
    }
    count=0;
    for(i=0;i<row;i++)
    {
		for(j=0;j<cols;j++)
        {
           	if(arr[i][j]=='V')
            {
               	count++;
               	for(int k=i,l=j;(k+1)<row && (l+1)<cols;k++,l++)
                {
               	    if(arr[k+1][l+1]!='V')
               		break;
               		else
               		count++;
               	}
            }
            if(countdl<count)
            countdl=count;
            count=0;
        }
    }
    if(countr>countc)
    a1=countr;
    else
    a1=countc;
    if(countdr>countdl)
    a2=countdr;
    else
    a2=countdl;
    if(a1>a2)
    max=a1;
    else
    max=a2;
    System.out.println(max);
}

Dr CooCoo Goes Trekking

class Solution 
{
    public static void Met(int[][] arr)
    {
        int n=arr.length, m=arr[0].length,count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
  	        {
  	            if(i==0)
                {
                    if(j==0)
      	            {
      	                if(arr[i][j]>arr[i][j+1]&&arr[i][j]>arr[i+1][j])
			            count++;
                    }
                    if(j==m-1)
                    {
                        if(arr[i][j]>arr[i][j-1]&&arr[i][j]>arr[i+1][j])
			            count++;
                    }
                    if(j>0&&j<m-1)
                    {
                        if(arr[i][j]>arr[i][j+1]&&arr[i][j]>arr[i+1][j]&&arr[i][j]>arr[i][j-1])
			            count++;
                    }
                }
                else if(i==n-1)
                {
                    if(j==0)
                    {
                        if(arr[i][j]>arr[i][j+1]&&arr[i][j]>arr[i-1][j])
			            count++;
                    }
                    if(j==m-1)
                    {
                        if(arr[i][j]>arr[i][j-1]&&arr[i][j]>arr[i-1][j])
			            count++;
                    }
                    if(j>0&&j<m-1)
                    {
                    if(arr[i][j]>arr[i][j+1]&&arr[i][j]>arr[i-1][j]&&arr[i][j]>arr[i][j-1])
			            count++;
                    }
                }
                else
                {
                    if(j==0)
                    {
                   if(arr[i][j]>arr[i-1][j]&&arr[i][j]>arr[i+1][j]&&arr[i][j]>arr[i][j+1])
			            count++;
                    }
                    if(j==m-1)
                    {
                    if(arr[i][j]>arr[i-1][j]&&arr[i][j]>arr[i+1][j]&&arr[i][j]>arr[i][j-1])
		            	count++;
                    }
                    if(j>0&&j<m-1)
                    { 
                         if(arr[i][j]>arr[i][j+1]&&arr[i][j]>arr[i+1][j]&&arr[i][j]>arr[i][j-1]&&arr[i][j]>arr[i-1][j])
			            count++;
                    }
                }
            }
        }
        System.out.println(count);
    }
}

Mr Zaza's Request

public static void Met(int [] a, int k)
{
    int c = a[0];
    int l = Math.abs(a[0] - k);
    for (int i = 0; i < a.length; i++) 
    {
        int d= Math.abs(a[i] - k);
        if (d< l) 
        {
            c = a[i];
            l = d;
        }
    }
    System.out.println(c);
}

Mr jacks machine

class Solution 
{
    public static void Met(int[][] arr)
    {
        int l=arr.length,temps,tempe,max=0,count=0;
        for(int i=0;i<l-1;i++)
        {
            for(int j=i+1;j<l;j++)
            {
                if(arr[i][1]>arr[j][1])
                {
                    tempe=arr[j][1];
                    arr[j][1]=arr[i][1];
                    arr[i][1]=tempe;
                    
                    temps=arr[j][0];
                    arr[j][0]=arr[i][0];
                    arr[i][0]=temps;           
                }
            }
        }
        for(int i=0;i<l-1;i++)
        {
            if(arr[i][1]<arr[i+1][0])
            {
                count=arr[i+1][0]-arr[i][1];
                if(count>max)
            	max=count;
            }
        }
        System.out.println(max);
    }
}

Dr CooCoo's Pack Of Hens

class Solution
{
public static boolean Met(int[] nums, int target) 
{
int start=0;
  boolean su=sum(start,nums,target);
  return su;
}
public static boolean sum(int start, int[] nums, int target) 
{
    if (start >= nums.length) 
    {
        if (target == 0) 
        {
            return true;
        }
        return false;
    }
    if (sum(start + 1, nums, target - nums[start])) 
    {
        return true;
    }
    if(sum(start + 1, nums, target))
    {
        return true;
    }
    return false;
  }
}

Evaluate postfix

class Solution{
String expression; 
int a[];
int t;
Solution(String k){
expression=k;
a=new int[k.length()];
t=-1;
}
public int eval()
{
int k=0;
for(int i=0;i<expression.length();i++)
{
if(Character.isDigit(expression.charAt(i)))
{
int j=Character.getNumericValue(expression.charAt(i));
push(j);
}
else{
char m=expression.charAt(i);
k=lol(m);
push(k);
}
}
return a[t];
}
public void push(int j){
if(t<expression.length()-1){
t++;
a[t]=j;
}
}
public int pop(){
int e=a[t];
t--;
return e;
}
public int lol(char m){
int q=pop();
int s=pop();
switch(m){
case'+':
return (s+q);
case'-':
return (s-q);
case'*':
return (s*q);
case'/':
return (s/q);
case'^':
return ((int)Math.pow(s,q));
}
return -1;
}
}

whats the span

class Solution
{
int temp_data[];

Solution(int []a)
{
this.temp_data=a;
}

public int[] span()
{
int n = temp_data.length; 
int S[]= new int[n]; 
S[0] = 1;
for (int i = 1; i < n; i++) 
{ 
  S[i] = 1;
for(int j=i-1;(j>=0)&&(temp_data[i]>=temp_data[j]);j--) 
                S[i]++; 

} 
return S;
}

}

jack jill game

class Solution 
{
void solve(int x,int[] a,int[] b)
{
int c,s=0,i=0,j=0;
for(c=0;x>=s;c++)
{
if(i<a.length&&j<b.length)
{if(a[i]<b[j])
{
s+=a[i];
i++;
//System.out.println(i+"."+j+"."+a[i]+"::"+s);
}
else
{
s+=b[j];
j++;
//System.out.println(i+"*"+j+"*"+b[j]+"::"+s);
}
}
else
{
if(i>=a.length)
{
for(;x>=s;)
{
s+=b[j];
j++;
}
}
else
{
for(;x>=s;)
{
s+=a[i];
i++;
}
}

}




}
System.out.println(i+j-1);
}

}

mr jack construction

class Solution 
{
    void solve(int []a, int []b, int []c)
    {
        int sum1 = 0,sum2 = 0,sum3 = 0;
        for(int i=0; i < a.length; i++)
        {
            sum1 += a[i];
        }
        for(int j=0; j < b.length; j++)
        {
            sum2 += b[j];
        }
        for(int k=0; k < c.length; k++)
        {
            sum3 += c[k];
        }
        boolean e = false;
        int x = 0,y = 0,z = 0;
        while(!e)
        {
            if((sum1 == sum2) && ( sum1 == sum3))
                e = true;
            else
            {
                if(sum1 > sum2)
                {
                    if(sum1 > sum3)
                    {
                        sum1 -= a[x];
                        x++;
                    }
                    else
                    {
                        sum3 -=c[z];
                        z++;
                    } 
                }
                else
                {
                    if(sum2 > sum3)
                    {
                        sum2 -= b[y];
                        y++;
                    }
                    else
                    {
                        sum3 -= c[z];
                        z++;
                    } 
                }
            }
        }
        System.out.println(sum1);
    }
}

find the merged (in linkedlist)

class Solution{
public int findMerge(MyLinkedList A,MyLinkedList B)
{
Node one=A.first;
Node two=B.first;
Node three=A.first;
Node four=B.first;
while(one!=null&&two!=null)
{one=one.next;two=two.next;}
while(one!=null||two!=null)
{
if(one!=null)
{one=one.next;three=three.next;}
else{two=two.next;four=four.next;}
}
while(three!=null)
{
if(four==three)
return three.data;
four=four.next;
three=three.next;
}
return -42;
}
}

find the cycle

class Solution{
public boolean findCycle(MyLinkedList A)
{
Node slw_ptr=A.first;
Node fast_ptr=A.first;
while(fast_ptr!=null)
{
slw_ptr=slw_ptr.next;
fast_ptr=fast_ptr.next;
if(fast_ptr!=null)
fast_ptr=fast_ptr.next;
if(slw_ptr==fast_ptr)
return true;
}
return false;
}
}


postorder traversal
class Node
{
    int data;
    Node left;
    Node right;
    
    Node(int data)
    {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}
class BST
{
    Node root;
    
    BST()
    {
        root = null;
    }
    public void insert(int data)
    {
        Node parent = root;
        if(parent==null)
        {
            root = new Node(data);
        }
        else 
        {
            Node x = root;
            while(x!=null)
            {
                parent = x;
                if(data > x.data) 
                    x = x.right;
                else if (data < x.data) 
                    x = x.left;
            }
            if(data > parent.data)
                parent.right = new Node(data);
            else if(data < parent.data)
                parent.left = new Node(data);
            
        }
    }
    
    void ino(Node x)
    {
        if( x == null)
            return;
        else
        {
            ino(x.left);
            ino(x.right);
            System.out.print( x.data +" ");
        }
    }
    
    void postorder()
    {
        Node cur_node = root;
        ino(root);
        System.out.println();
    }

}

bst or bluff
public static boolean checkBST(Node node)
{
    return isBSTUtil(node, Integer.MIN_VALUE, Integer.MAX_VALUE);
}
public static boolean isBSTUtil(Node node, int min, int max) 
{ 
    if (node == null) 
        return true; 
    if (node.data < min || node.data > max) 
        return false; 
    return (isBSTUtil(node.left, min, node.data-1) && 
                isBSTUtil(node.right, node.data+1, max)); 
} 
