While us humans can understand how to calculate a simple mathematical expression like 2 + 3 * 7 - 9 / 5, computers use a special technique to make it easier for them. They convert an infix expression to a postfix expression.

An infix expression is one in which all the operators (+,-,*,/) appear between operands, just like our usual expressions.

A postifx expression is one in which all the operands appear first, and the operators appear after the operands.

Write a class Fixes that has 2 strings infix and postfix. It should have a parameterized constructor to accept the value of infix.

Also, it should have a method called convert that converts the infix to a postfix expression and stores it in the postfix.

Write only the Fixes class. Main class has already been written.

Hint: Check google for tutorials on infix to postfix conversion first. Then write the code for it.
Note: all operands will be of single digit only

Example Input:
2+3*7-9/5
Output:
237*+95/-
Example Input:
(2+3)*7-9/2^1
Output:
23+7*921^/-

=============================================================================

class Fixes{
String infix="",postfix="";
int top;
char temp[];
Fixes(String l){
infix=l;
temp=new char[l.length()];
top=-1;
}
public void convert(){
for(int i=0;i<infix.length();i++){
char e=infix.charAt(i);
if(Character.isDigit(e)){
postfix+=infix.charAt(i);
}
else if(infix.charAt(i)=='('||infix.charAt(i)==')'){
if(infix.charAt(i)=='('){
push(infix.charAt(i));
}
else{
while(top>0&&temp[top]!='('){
postfix+=pop();
}
pop();
}
}
else{
if(top==-1){
push(infix.charAt(i));
}
else{
if(check(temp[top])<check(infix.charAt(i))){
push(infix.charAt(i));
}
else{
while(top!=-1&&check(temp[top])>=check(infix.charAt(i))){
postfix+=pop();}
if(top==-1){
push(infix.charAt(i));
}
else if(check(temp[top])<check(infix.charAt(i))){
push(infix.charAt(i));
}
}
}
}
}
while(top!=-1){
postfix+=pop();
}
}

public void push(char j){
if(top<infix.length()-1){
top++;
temp[top]=j;
}
}
public char pop(){
char u=temp[top];
top--;
return u;
}
public int check(char t){
switch(t){
case '+':
case '-':
return 1;

case '*':
case '/':
return 2;

case '^':
return 3;

}
return -1;
}
}